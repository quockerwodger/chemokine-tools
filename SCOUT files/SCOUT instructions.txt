- SCOUT was developed as an enhanced version of CIWI with Machine learning capabilities owing to difficulties in making manual predictions
- As there were several possible approaches to this, four different ML models were generated

### SCOUT V1 ###
- The first version developed
- This version takes input sequences for known binders ('binders.txt') and known non-binders ('non_binders.txt') seperately
	- Update within code if wish to change
	- Input sequences must all be the same length
- Much like CIWI, each sequence is converted into a new table based on a reference property table
	- In this case, variable types are now seperated into seperate dataframes for hydropathy, polarity, residue type, size, and side chain type
- Each datatype has a consensus generated individually
	- Identity = where present in >60% of sequences
	- Volume = reject outliers (based on distance from median value), calculate average to define consensus
			- Used modified Z score as defined in https://www.ibm.com/docs/en/cognos-analytics/11.1.0?topic=terms-modified-z-score
			- Reduced cutoff to +/- 2.0
			- Also reported standard deviation of values used for mean
				- This is to see how much the close values vary (i.e. how far from consensus before it starts becoming a likely incorrect match)
				- If the standard deviation is between 0.0-0.0001, it is artificially set to 0.01
	- Size = same as Volume
	- Side chain type = same as Identity
	- Polarity = +1 = charged +ve, +0.5 = polar +ve, 0.0 = non-polar, -0.5 = polar -ve, -1 = charged -ve
			- To calculate:
				- If there is only one type of value, this is used as the consensus
				- If the count of charged +ve & polar +ve (or -ve) is > 60% of sequences, the average of these two is used ((charge*no. charged)+(polar*no. polar))/(no. charged * no. polar)
				- Otherwise, a charge present in > 60% of sequences is used as consensus
				- Standard deviation also provided
			- Otherwise, just 'X' if no consensus could be calculated according to above approach
- Each variable is also scored individually on new inputs
	- Identity & side chain type =
 		If consensus = 'X' (i.e. no consensus), score = 0
		If input == consensus, score = 1
		If input != consensus, score = 0
	- Size & Hydropathy = |(Input - consensus)|/std deviation
			- If standard deviation = 0, artificially set it to 0.01 (as a note for when analysing, set to +0.01 if the input > consensus and -0.01 if input < consensus)
	- Polarity = 
		If input == consensus, score = 1
		If consensus = 'X' (i.e. no consensus), score = 0
		If consensus value is a calculated one, use same formula as for size & hydropathy scoring
- Overall score calculation is a weighted average of these
	-  Each property averaged individually
		- For Size, scores > 100 given weight of 0.05
		- For polarity, scores > 25 given weight of 0.2
		- For hydropathy, scores > 5 given weight of 0.8
- Machine learning models
	- Model 1 = input weighted average for each property
	- Model 2 = input raw values for each property

## SCOUT v2 ##
- Identical set up to v1, only created as separate file for ease of generating ML model
- Consensus not calculated
- Calculated values for: size, polarity, hydropathy
	- Amino acid code & side chain type ignored
	- Used smaller input property table
- Machine learning model
	- Model 3 = raw size, polarity, & hydropathy scores for short sequences

## SCOUT v3 ##
- Identical to v2, created for ease of generating ML model
- Only difference from v2 is that input seqeucnes are longer (but still all same size)
- Machine learning model
	- Model 4 = raw size, polarity, & hydropathy scores for long sequences

## making_predictions.py ##
- Combination script
- Requires manual updating of input sequence files (short & long versions) and consensus sequences for each property
- Script will do all necessary scoring & sequence conversions to create the appropriate inputs for each of the four ML models generated by SCOUT
- Prints on screen the prediction & probability score, need to manually copy & paste into a file